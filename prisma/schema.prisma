//? Prisma schema file

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "npx zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//* AUTH TABLES ----------

model User {
  id              String   @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  username        String?
  displayUsername String?

  sessions Session[]
  accounts Account[]
  creator  Tracker[]
  player   TrackerPlayer[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

//* ----------------------

//* Tracker tables

enum TrackerName {
  SCHWIMMEN
}

model Tracker {
  id          String      @id @default(cuid())
  creatorId   String
  name        TrackerName
  displayName String
  archived    Boolean     @default(false)
  createdAt   DateTime    @default(now())

  creator User            @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  players TrackerPlayer[]
  games   Game[]

  @@unique([creatorId, displayName])
  @@index([creatorId, name])
}

model TrackerPlayer {
  id        String  @id @default(cuid())
  trackerId String
  playerId  String?
  name      String?

  tracker    Tracker            @relation(fields: [trackerId], references: [id], onDelete: Cascade)
  player     User?              @relation(fields: [playerId], references: [id], onDelete: Cascade)
  roundState RoundPlayerState[]
}

model Game {
  id          String    @id @default(cuid())
  trackerId   String
  completedAt DateTime?
  winnerId    String?
  firstAtZero String?
  lastTwo     Json?
  createdAt   DateTime  @default(now())

  tracker Tracker @relation(fields: [trackerId], references: [id], onDelete: Cascade)
  rounds  Round[]
}

model Round {
  id          String   @id @default(cuid())
  gameId      String
  roundNumber Int
  createdAt   DateTime @default(now())

  game   Game               @relation(fields: [gameId], references: [id], onDelete: Cascade)
  states RoundPlayerState[]

  @@unique([gameId, roundNumber]) // Ensures unique round numbers per game
}

model RoundPlayerState {
  id       String @id @default(cuid())
  roundId  String
  playerId String
  lifes    Int

  round  Round         @relation(fields: [roundId], references: [id], onDelete: Cascade)
  player TrackerPlayer @relation(fields: [playerId], references: [id], onDelete: Cascade)
}
