//? Prisma schema file

generator client {
  provider = "prisma-client-js"
  // output = "./prisma" -> needed after prisma v7
}

// run command: pnpm dlx prisma generate --generator client --generator json
generator json {
  provider = "npx prisma-json-types-generator"
}

// run command: pnpm dlx prisma generate --generator client --generator zod
generator zod {
  provider                  = "npx zod-prisma-types"
  output                    = "./zod"
  useMultipleFiles          = true
  writeBarrelFiles          = false
  createInputTypes          = false
  addIncludeType            = false
  addSelectType             = false
  addInputTypeValidation    = false
  createRelationValuesTypes = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//* AUTH TABLES ----------

model User {
  id              String   @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  username        String?
  displayUsername String?

  sessions        Session[]
  accounts        Account[]
  creator         Tracker[]
  trackerPlayer   TrackerPlayer[]
  gameParticipant GameParticipant[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

//* ----------------------

//* Tracker tables
enum TrackerType {
  SCHWIMMEN
  DURAK
}

model Tracker {
  id          String      @id @default(cuid())
  type        TrackerType
  displayName String
  archived    Boolean     @default(false)
  updatedAt   DateTime    @updatedAt
  createdAt   DateTime    @default(now())

  creatorId String?
  creator   User?   @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  players TrackerPlayer[]
  games   Game[]

  @@unique([creatorId, displayName])
  @@index([creatorId, type])
}

model TrackerPlayer {
  id          String @id @default(cuid())
  displayName String

  trackerId String
  tracker   Tracker @relation(fields: [trackerId], references: [id], onDelete: Cascade)

  playerId String?
  player   User?   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([trackerId, playerId])
  @@unique([trackerId, displayName])
}

//* Game tables
enum GameStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model Game {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  status    GameStatus @default(ACTIVE)

  trackerId String
  tracker   Tracker @relation(fields: [trackerId], references: [id], onDelete: Restrict)

  /// ![PrismaJson.GameData]
  gameData Json

  participants GameParticipant[]
  rounds       GameRound[]

  @@index([trackerId])
}

model GameRound {
  /// ![PrismaJson.RoundData]
  data  Json
  round Int

  gameId String
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@id([gameId, round])
  @@unique([gameId, round])
}

model GameParticipant {
  id          String @id @default(cuid())
  displayName String
  order       Int?

  gameId String
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([gameId, userId])
}
