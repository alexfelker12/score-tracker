//? Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//* AUTH TABLES ----------

model User {
  id            String   @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  sessions Session[]
  accounts Account[]

  username        String?
  displayUsername String?

  @@unique([email])
  @@map("user")
  @@unique([username])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
//* ----------------------

//* Tracker tables

enum TrackerName {
  SCHWIMMEN
}

model Tracker {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  playerData Json?

  name TrackerName

  TrackerSession TrackerSession?
}

model TrackerSession {
  id        String @id @default(cuid())
  trackerId String @unique
  // TODO additional data - depends on tracking state shape 

  tracker Tracker @relation(fields: [trackerId], references: [id])
}
